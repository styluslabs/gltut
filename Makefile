# simple C/C++ makefile
# - generates files in ./Release (default) or ./Debug (with DEBUG=1 passed to make)
# - uses dependency files generated by gcc to automatically handle header dependencies

TARGET = gltut
SOURCES = lbfont.cpp swrender.cpp lbmain.cpp
INC = .
INCSYS = ../glm ../stb
DEFS =
##-I../libtess2/Include -L ../libtess2/Build -ltess2

ifneq ($(windir),)
# Windows
# GLEW and SDL libraries from official sites
INCSYS += \
  ../SDL/include \
  ../../glew-2.1.0/include

DEFS += _USE_MATH_DEFINES UNICODE NOMINMAX

# self-built static SDL - dynamic libs avail from official SDL site
# - see http://www.glusoft.com/tuto/SDL2-static-visual-studio.php ; need to upgrade projs to build in VS2017
# libs below opengl32.lib needed only for static SDL
LIBS = \
  ../SDL/VisualC/Win32/Release/SDL2.lib \
  ../SDL/VisualC/Win32/Release/SDL2main.lib \
  ../../glew-2.1.0/lib/Release/Win32/glew32s.lib \
  glu32.lib \
  opengl32.lib \
  gdi32.lib \
  user32.lib \
  ole32.lib \
  oleaut32.lib \
  shell32.lib \
  advapi32.lib \
  setupapi.lib \
  winmm.lib \
  imm32.lib \
  version.lib

RESOURCES =
FORCECPP =

include Makefile.msvc
else
# Linux
INCSYS += /usr/include/SDL2
LIBS = -lSDL2 -lGLEW -lGL -lGLU

CFLAGS = -MMD -Wall -Wshadow
CXX = g++
CXXFLAGS = --std=c++14 -fno-rtti -fno-exceptions -Werror=return-type
CC = gcc
CCFLAGS = --std=c99
LD = g++
LDFLAGS =

DEBUG ?= 0
ifneq ($(DEBUG), 0)
	CFLAGS += -g
	BUILDDIR = Debug
else
	CFLAGS += -O2 -march=native -DNDEBUG
	BUILDDIR = Release
endif

SANITIZE ?= 0
ifneq ($(SANITIZE), 0)
	CFLAGS += -fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero
	LDFLAGS += -lasan -lubsan
endif

# disable optimizations which make profiling difficult, esp. inlining; frame pointer needed for sampling
PROFILE ?= 0
ifneq ($(PROFILE), 0)
	CFLAGS += -fno-inline -fno-omit-frame-pointer -g
endif

# project independent stuff
# pkg-config headers and libraries
ifneq ($(PKGS),)
	CFLAGS += $(shell pkg-config --cflags $(PKGS))
	LIBS += $(shell pkg-config --libs $(PKGS))
endif

ifneq ($(TOPDIR),)
	OBJDIR=$(BUILDDIR)/$(TOPDIR)
else
	OBJDIR=$(BUILDDIR)
endif

# include files
INCFLAGS = $(INC:%=-I%) $(INCSYS:%=-isystem%)

# defines
CFLAGS += $(DEFS:%=-D%)

SRCBASE=$(basename $(SOURCES))
OBJ=$(SRCBASE:%=$(OBJDIR)/%.o)
DEPS=$(SRCBASE:%=$(OBJDIR)/%.d)
TGT=$(BUILDDIR)/$(TARGET)
# gcc will not create directories, so depend on existence of all directories in output folder
# sort removes duplicates (which cause make error)
BUILDDIRS=$(sort $(dir $(OBJ)))

.PHONY: all clean distclean

all: $(TGT)

$(OBJDIR)/%.o: %.cpp
	$(CXX) -c -o $@ $< $(CFLAGS) $(CXXFLAGS) $(INCFLAGS)

$(OBJDIR)/%.o: %.c
	$(CC) -c -o $@ $< $(CFLAGS) $(CCFLAGS) $(INCFLAGS)

$(TGT): $(OBJ)
	$(LD) -o $@ $^ $(LDFLAGS) $(LIBS)

# | (pipe) operator causes make to just check for existence instead of timestamp
$(OBJ): | $(BUILDDIRS)

$(BUILDDIRS):
	mkdir -p $(BUILDDIRS)

clean:
	rm -f $(TGT) $(OBJ) $(DEPS)

distclean:
	rm -rf ./Debug ./Release

# dependency files generated by gcc (-MMD switch) ("-include" ignores file if missing)
-include $(DEPS)

# end Linux section
endif
